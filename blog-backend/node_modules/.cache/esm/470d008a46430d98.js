let jwtMiddleware,Koa,Router,bodyParser,mongoose,api;_464‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_464‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_464‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_464‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_464‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_464‍.w("./api",[["default",["api"],function(v){api=v}]]);

require('dotenv').config();




// import createFakeData from "./createFakeData";


//비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const {PORT, MONGO_URI} = process.env;

mongoose.connect(MONGO_URI, {useNewUrlParser: true, useFindAndModify: false}).then(() => {
    console.log("Connected to MongoDB");
    // createFakeData();
}).catch(e => {
    _464‍.g.console.error(e);
});

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

//PORT 가 지정되어있지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(port, () => {
    _464‍.g.console.log('listening to port %d', port);
});