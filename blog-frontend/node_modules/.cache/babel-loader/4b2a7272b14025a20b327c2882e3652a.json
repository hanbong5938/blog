{"ast":null,"code":"import _defineProperty from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; //초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 변경\n\nconst _createRequestActionT = createRequestActionTypes('write/WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      WRITE_POST = _createRequestActionT2[0],\n      WRITE_POST_SUCCESS = _createRequestActionT2[1],\n      WRITE_POST_FAILURE = _createRequestActionT2[2];\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  body,\n  tags\n}) => ({\n  title,\n  body,\n  tags\n}));\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [WRITE_POST]: state => _objectSpread({}, state, {\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [WRITE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => _objectSpread({}, state, {\n    postError\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["/home/h/workspace/blog/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","tags","writePostSaga","writeSaga","initialState","post","postError","write","state","payload"],"mappings":";;;;;;;AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,iBAAP,IAA2BC,wBAA3B,QAA0D,0BAA1D;AACA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AAGA,MAAMC,UAAU,GAAG,kBAAnB,C,CAAuC;;AACvC,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;8BACmBJ,wBAAwB,CAAC,kBAAD,C;;MAA/EK,U;MAAYC,kB;MAAoBC,kB;;AAEvC,OAAO,MAAMC,UAAU,GAAGX,YAAY,CAACM,UAAD,CAA/B;AACP,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAD,EAAe,CAAC;AAACM,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,MAAmB;AACrED,EAAAA,GADqE;AAChEC,EAAAA;AADgE,CAAnB,CAAf,CAAhC;AAGP,OAAO,MAAMC,SAAS,GAAGf,YAAY,CAACQ,UAAD,EAAa,CAAC;AAACQ,EAAAA,KAAD;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,MAA0B;AACxEF,EAAAA,KADwE;AACjEC,EAAAA,IADiE;AAC3DC,EAAAA;AAD2D,CAA1B,CAAb,CAA9B;AAIP,MAAMC,aAAa,GAAGjB,iBAAiB,CAACM,UAAD,EAAaJ,QAAQ,CAACW,SAAtB,CAAvC;AAEA,OAAO,UAAUK,SAAV,GAAsB;AACzB,QAAMf,UAAU,CAACG,UAAD,EAAaW,aAAb,CAAhB;AACH;AAED,MAAME,YAAY,GAAG;AACjBL,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,IAAI,EAAE,EAHW;AAIjBI,EAAAA,IAAI,EAAE,IAJW;AAKjBC,EAAAA,SAAS,EAAE;AALM,CAArB;AAQA,MAAMC,KAAK,GAAGvB,aAAa,CAAC;AACxB,GAACK,UAAD,GAAcmB,KAAK,IAAIJ,YADC;AAExB,GAACd,YAAD,GAAgB,CAACkB,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAE;AAACb,MAAAA,GAAD;AAAMC,MAAAA;AAAN;AAAV,GAAR,uBACTW,KADS;AAEZ,KAACZ,GAAD,GAAOC;AAFK,IAFQ;AAMxB,GAACN,UAAD,GAAciB,KAAK,sBACZA,KADY;AAEfH,IAAAA,IAAI,EAAE,IAFS;AAGfC,IAAAA,SAAS,EAAE;AAHI,IANK;AAWxB,GAACd,kBAAD,GAAsB,CAACgB,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAEJ;AAAV,GAAR,uBACfG,KADe;AAElBH,IAAAA;AAFkB,IAXE;AAexB,GAACZ,kBAAD,GAAsB,CAACe,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAEH;AAAV,GAAR,uBACfE,KADe;AAElBF,IAAAA;AAFkB;AAfE,CAAD,EAmBxBF,YAnBwB,CAA3B;AAqBA,eAAeG,KAAf","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport createRequestSaga, {createRequestActionTypes} from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/posts';\nimport {takeLatest} from 'redux-saga/effects';\n\n\nconst INITIALIZE = 'write/INITIALIZE'; //초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key 변경\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE,] = createRequestActionTypes('write/WRITE_POST');\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({key, value}) => ({\n    key, value,\n}));\nexport const writePost = createAction(WRITE_POST, ({title, body, tags}) => ({\n    title, body, tags,\n}));\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\n\nexport function* writeSaga() {\n    yield takeLatest(WRITE_POST, writePostSaga);\n}\n\nconst initialState = {\n    title: '',\n    body: '',\n    tags: [],\n    post: null,\n    postError: null,\n};\n\nconst write = handleActions({\n    [INITIALIZE]: state => initialState,\n    [CHANGE_FIELD]: (state, {payload: {key, value}}) => ({\n        ...state,\n        [key]: value,\n    }),\n    [WRITE_POST]: state => ({\n        ...state,\n        post: null,\n        postError: null,\n    }),\n    [WRITE_POST_SUCCESS]: (state, {payload: post}) => ({\n        ...state,\n        post,\n    }),\n    [WRITE_POST_FAILURE]: (state, {payload: postError}) => ({\n        ...state,\n        postError,\n    }),\n}, initialState);\n\nexport default write;"]},"metadata":{},"sourceType":"module"}