{"ast":null,"code":"import _slicedToArray from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/h/workspace/blog/blog-frontend/src/containers/auth/RegisterForm.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeField, initializeForm, register } from \"../../modules/auth\";\nimport AuthForm from \"../../components/auth/AuthForm\";\nimport { check } from \"../../modules/user\";\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({\n  history\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        error = _useState2[0],\n        setError = _useState2[1];\n\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    auth,\n    user\n  }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user\n  })),\n        form = _useSelector.form,\n        auth = _useSelector.auth,\n        authError = _useSelector.authError,\n        user = _useSelector.user;\n\n  const onChange = e => {\n    const _e$target = e.target,\n          value = _e$target.value,\n          name = _e$target.name;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const username = form.username,\n          password = form.password,\n          passwordConfirm = form.passwordConfirm;\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('필수 값을 모두 입력해 주세요.');\n      return;\n    }\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({\n        form: 'register',\n        key: \"password\",\n        value: ''\n      });\n      changeField({\n        form: 'register',\n        key: \"passwordConfirm\",\n        value: ''\n      });\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  };\n\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]); //컴포넌트가 처음 렌더링시 form 초기화\n\n  useEffect(() => {\n    if (authError) {\n      //아이디 중복\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정입니다.');\n        return;\n      }\n\n      setError('잠시후 다시 시도해주세요.');\n      return;\n    }\n\n    if (auth) {\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]); //user 값 설정 확인\n\n  useEffect(() => {\n    if (user) {\n      //홈화면\n      history.push('/');\n\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n  return React.createElement(AuthForm, {\n    type: 'register',\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(RegisterForm);","map":{"version":3,"sources":["/home/h/workspace/blog/blog-frontend/src/containers/auth/RegisterForm.js"],"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","withRouter","RegisterForm","history","error","setError","dispatch","auth","user","form","authError","onChange","e","target","value","name","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","push","localStorage","setItem","JSON","stringify","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeField, initializeForm, register} from \"../../modules/auth\";\nimport AuthForm from \"../../components/auth/AuthForm\";\nimport {check} from \"../../modules/user\";\nimport {withRouter} from 'react-router-dom';\n\nconst RegisterForm = ({history}) => {\n    const [error, setError] = useState(null);\n    const dispatch = useDispatch();\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\n        form: auth.register,\n        auth: auth.auth,\n        authError: auth.authError,\n        user: user\n    }));\n\n    const onChange = e => {\n        const {value, name} = e.target;\n        dispatch(\n            changeField({\n                form: 'register',\n                key: name,\n                value,\n            }),\n        );\n    };\n\n    const onSubmit = e => {\n        e.preventDefault();\n        const {username, password, passwordConfirm} = form;\n\n        if ([username, password, passwordConfirm].includes('')) {\n            setError('필수 값을 모두 입력해 주세요.');\n            return;\n        }\n\n        if (password !== passwordConfirm) {\n            setError('비밀번호가 일치하지 않습니다.');\n            changeField({form: 'register', key: \"password\", value: ''});\n            changeField({form: 'register', key: \"passwordConfirm\", value: ''});\n            return;\n        }\n        dispatch(register({username, password}));\n    };\n\n    useEffect(() => {\n        dispatch(initializeForm('register'));\n    }, [dispatch]);\n\n    //컴포넌트가 처음 렌더링시 form 초기화\n    useEffect(() => {\n        if (authError) {\n            //아이디 중복\n            if (authError.response.status === 409) {\n                setError('이미 존재하는 계정입니다.');\n                return;\n            }\n            setError('잠시후 다시 시도해주세요.');\n            return;\n        }\n        if (auth) {\n            dispatch(check());\n        }\n    }, [auth, authError, dispatch]);\n\n    //user 값 설정 확인\n    useEffect(() => {\n        if (user) {\n            //홈화면\n            history.push('/');\n            try {\n                localStorage.setItem('user', JSON.stringify(user));\n            } catch (e) {\n                console.log('localStorage is not working');\n            }\n        }\n    }, [history, user]);\n    return (\n        <AuthForm type={'register'} form={form} onChange={onChange} onSubmit={onSubmit} error={error}/>\n    );\n};\n\nexport default withRouter(RegisterForm);"]},"metadata":{},"sourceType":"module"}