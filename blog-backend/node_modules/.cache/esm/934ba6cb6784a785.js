let mongoose,Schema,bcrypt,jwt;_678‍.x([["default",()=>_678‍.o]]);_678‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_678‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_678‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    username: String,
    hashedPassword: String,
});

UserSchema.methods.setPassword = async function (password) {
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function (password) {
    const result = await bcrypt.compare(password, this.hashedPassword);
    return result;
};

UserSchema.methods.serialize = function () {
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
};

UserSchema.methods.generateToken = function () {
    const token = jwt.sign(
        //첫 파라미터는 토큰안에 넣고 싶은 데이터
        {
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_SECRET, //두번째 파라미터에는 JWT 암호
        {
            expiresIn: '15d' //15일 동안 유효
        }
    );
    return token;
};

UserSchema.statics.findByUsername = function(username) {
    return this.findOne({ username });
};

const User = mongoose.model('User', UserSchema);
_678‍.d(User);