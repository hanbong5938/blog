{"ast":null,"code":"import _defineProperty from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst _createRequestActionT = createRequestActionTypes('posts/LIST_POSTS'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      LIST_POSTS = _createRequestActionT2[0],\n      LIST_POSTS_SUCCESS = _createRequestActionT2[1],\n      LIST_POSTS_FAILURE = _createRequestActionT2[2];\n\nexport const listPosts = createAction(LIST_POSTS, ({\n  tag,\n  username,\n  page\n}) => ({\n  tag,\n  username,\n  page\n}));\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1\n};\nconst posts = handleActions({\n  [LIST_POSTS_SUCCESS]: (state, {\n    payload: posts,\n    meta: response\n  }) => _objectSpread({}, state, {\n    posts,\n    // 문자열을 숫자로 변환\n    lastPage: parseInt(response.headers['last-page'], 10)\n  }),\n  [LIST_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state, {\n    error\n  })\n}, initialState);\nexport default posts;","map":{"version":3,"sources":["/home/h/workspace/blog/blog-frontend/src/modules/posts.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","tag","username","page","listPostsSaga","postsSaga","initialState","posts","error","lastPage","state","payload","meta","response","parseInt","headers"],"mappings":";;;;;;;AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,iBAAP,IACIC,wBADJ,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,oBAAzB;;8BAMIF,wBAAwB,CAAC,kBAAD,C;;MAHxBG,U;MACAC,kB;MACAC,kB;;AAGJ,OAAO,MAAMC,SAAS,GAAGT,YAAY,CACjCM,UADiC,EAEjC,CAAC;AAACI,EAAAA,GAAD;AAAMC,EAAAA,QAAN;AAAgBC,EAAAA;AAAhB,CAAD,MAA4B;AAACF,EAAAA,GAAD;AAAMC,EAAAA,QAAN;AAAgBC,EAAAA;AAAhB,CAA5B,CAFiC,CAA9B;AAKP,MAAMC,aAAa,GAAGX,iBAAiB,CAACI,UAAD,EAAaF,QAAQ,CAACK,SAAtB,CAAvC;AAEA,OAAO,UAAUK,SAAV,GAAsB;AACzB,QAAMT,UAAU,CAACC,UAAD,EAAaO,aAAb,CAAhB;AACH;AAED,MAAME,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAArB;AAMA,MAAMF,KAAK,GAAGf,aAAa,CACvB;AACI,GAACM,kBAAD,GAAsB,CAACY,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAEJ,KAAV;AAAiBK,IAAAA,IAAI,EAAEC;AAAvB,GAAR,uBACfH,KADe;AAElBH,IAAAA,KAFkB;AAGlB;AACAE,IAAAA,QAAQ,EAAEK,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,WAAjB,CAAD,EAAgC,EAAhC;AAJA,IAD1B;AAOI,GAAChB,kBAAD,GAAsB,CAACW,KAAD,EAAQ;AAACC,IAAAA,OAAO,EAAEH;AAAV,GAAR,uBACfE,KADe;AAElBF,IAAAA;AAFkB;AAP1B,CADuB,EAavBF,YAbuB,CAA3B;AAgBA,eAAeC,KAAf","sourcesContent":["import {createAction, handleActions} from 'redux-actions';\nimport createRequestSaga, {\n    createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport {takeLatest} from 'redux-saga/effects';\n\nconst [\n    LIST_POSTS,\n    LIST_POSTS_SUCCESS,\n    LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n    LIST_POSTS,\n    ({tag, username, page}) => ({tag, username, page}),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\n\nexport function* postsSaga() {\n    yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = {\n    posts: null,\n    error: null,\n    lastPage: 1,\n};\n\nconst posts = handleActions(\n    {\n        [LIST_POSTS_SUCCESS]: (state, {payload: posts, meta: response}) => ({\n            ...state,\n            posts,\n            // 문자열을 숫자로 변환\n            lastPage: parseInt(response.headers['last-page'], 10),\n        }),\n        [LIST_POSTS_FAILURE]: (state, {payload: error}) => ({\n            ...state,\n            error,\n        }),\n    },\n    initialState,\n);\n\nexport default posts;"]},"metadata":{},"sourceType":"module"}