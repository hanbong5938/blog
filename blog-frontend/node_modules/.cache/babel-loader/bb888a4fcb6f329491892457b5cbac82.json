{"ast":null,"code":"import _slicedToArray from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/h/workspace/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/h/workspace/blog/blog-frontend/src/components/write/TagBox.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  margin-top: 0.5rem;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n    margin-right: 0.5rem;\\n    color: \", \";\\n    cursor: pointer;\\n    &:hover {\\n    opacity: 0.5;\\n    }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    border-radius: 4px;\\n    overflow: hidden;\\n    display:flex;\\n    width: 256pxx;\\n    border: 1px solid \", \";/*\\uC2A4\\uD0C0\\uC77C \\uCD08\\uAE30\\uD654*/\\n    input,\\n    button{\\n    outline: none;\\n    border:none;\\n    font-size: 1rem;\\n    }\\n    \\n    input{\\n    padding:0.5rem;\\n    flex: 1;\\n    }\\n    \\n    button {\\n    cursor: pointer;\\n    padding-right: 1rem;\\n    padding-left: 1rem;\\n    border: none;\\n    background: \", \";\\n    color:white;\\n    font-weight: bold;\\n    &:hover{\\n    background: \", \";\\n    }\\n}    \\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    border-top: 1px solid \", \";\\n    padding-top: 2rem;\\n    \\n    h4{\\n    color: \", \";\\n    margin-top: 0;\\n    margin-bottom: 0.5rem;\\n    }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from \"../../lib/styles/palette\";\nconst TagBoxBlock = styled.div(_templateObject(), palette.gray[2], palette.gray[8]);\nconst TagForm = styled.div(_templateObject2(), palette.gray[9], palette.gray[8], palette.gray[6]);\nconst Tag = styled.div(_templateObject3(), palette.gray[6]);\nconst TagListBlock = styled.div(_templateObject4()); //react.memo사용하여 tag값이 변경시에만 리렌러링\n\nconst TagItem = React.memo(({\n  tag,\n  onRemove,\n  onChangeTags\n}) => React.createElement(Tag, {\n  onClick: () => onRemove(tag),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}, \"#\", tag)); // React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\n\nconst TagList = React.memo(({\n  tags,\n  onRemove\n}) => React.createElement(TagListBlock, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}, tags.map(tag => React.createElement(TagItem, {\n  key: tag,\n  tag: tag,\n  onRemove: onRemove,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}))));\n\nconst TagBox = ({\n  tags,\n  onChangeTags\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        input = _useState2[0],\n        setInput = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        localTags = _useState4[0],\n        setLocalTags = _useState4[1];\n\n  const insertTag = useCallback(tag => {\n    if (!tag) return; // 공백이라면 추가하지 않음\n\n    if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n\n    const nextTags = [...localTags, tag];\n    setLocalTags(nextTags);\n    onChangeTags(nextTags);\n  }, [localTags, onChangeTags]);\n  const onRemove = useCallback(tag => {\n    const nextTags = localTags.filter(t => t !== tag);\n    setLocalTags(nextTags);\n    onChangeTags(nextTags);\n  }, [localTags, onChangeTags]);\n  const onChange = useCallback(e => {\n    setInput(e.target.value);\n  }, []);\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n    insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n\n    setInput(''); // input 초기화\n  }, [input, insertTag]); // tags 값이 바뀔 때\n\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n  return React.createElement(TagBoxBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"\\uD0DC\\uADF8\"), React.createElement(TagForm, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n    value: input,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"\\uCD94\\uAC00\")), React.createElement(TagList, {\n    tags: localTags,\n    onRemove: onRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }));\n};\n\nexport default TagBox;","map":{"version":3,"sources":["/home/h/workspace/blog/blog-frontend/src/components/write/TagBox.js"],"names":["React","useState","useCallback","useEffect","styled","palette","TagBoxBlock","div","gray","TagForm","Tag","TagListBlock","TagItem","memo","tag","onRemove","onChangeTags","TagList","tags","map","TagBox","input","setInput","localTags","setLocalTags","insertTag","includes","nextTags","filter","t","onChange","e","target","value","onSubmit","preventDefault","trim"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from \"../../lib/styles/palette\";\n\nconst TagBoxBlock = styled.div`\n    width: 100%;\n    border-top: 1px solid ${palette.gray[2]};\n    padding-top: 2rem;\n    \n    h4{\n    color: ${palette.gray[8]};\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n    }\n`;\n\nconst TagForm = styled.div`\n    border-radius: 4px;\n    overflow: hidden;\n    display:flex;\n    width: 256pxx;\n    border: 1px solid ${palette.gray[9]};/*스타일 초기화*/\n    input,\n    button{\n    outline: none;\n    border:none;\n    font-size: 1rem;\n    }\n    \n    input{\n    padding:0.5rem;\n    flex: 1;\n    }\n    \n    button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color:white;\n    font-weight: bold;\n    &:hover{\n    background: ${palette.gray[6]};\n    }\n}    \n`;\n\nconst Tag = styled.div`\n    margin-right: 0.5rem;\n    color: ${palette.gray[6]};\n    cursor: pointer;\n    &:hover {\n    opacity: 0.5;\n    }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n//react.memo사용하여 tag값이 변경시에만 리렌러링\nconst TagItem = React.memo(({ tag, onRemove, onChangeTags }) => (\n    <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\nconst TagList = React.memo(({ tags, onRemove }) => (\n    <TagListBlock>\n        {tags.map(tag => (\n            <TagItem key={tag} tag={tag} onRemove={onRemove} />\n        ))}\n    </TagListBlock>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n    const [input, setInput] = useState('');\n    const [localTags, setLocalTags] = useState([]);\n\n    const insertTag = useCallback(\n        tag => {\n            if (!tag) return; // 공백이라면 추가하지 않음\n            if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n            const nextTags = [...localTags, tag];\n            setLocalTags(nextTags);\n            onChangeTags(nextTags);\n        },\n        [localTags, onChangeTags],\n    );\n\n    const onRemove = useCallback(\n        tag => {\n            const nextTags = localTags.filter(t => t !== tag);\n            setLocalTags(nextTags);\n            onChangeTags(nextTags);\n        },\n        [localTags, onChangeTags],\n    );\n\n    const onChange = useCallback(e => {\n        setInput(e.target.value);\n    }, []);\n\n    const onSubmit = useCallback(\n        e => {\n            e.preventDefault();\n            insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n            setInput(''); // input 초기화\n        },\n        [input, insertTag],\n    );\n\n    // tags 값이 바뀔 때\n    useEffect(() => {\n        setLocalTags(tags);\n    }, [tags]);\n\n    return (\n        <TagBoxBlock>\n            <h4>태그</h4>\n            <TagForm onSubmit={onSubmit}>\n                <input\n                    placeholder=\"태그를 입력하세요\"\n                    value={input}\n                    onChange={onChange}\n                />\n                <button type=\"submit\">추가</button>\n            </TagForm>\n            <TagList tags={localTags} onRemove={onRemove} />\n        </TagBoxBlock>\n    );\n};\n\nexport default TagBox;"]},"metadata":{},"sourceType":"module"}